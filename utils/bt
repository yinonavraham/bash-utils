#!/bin/bash
source $BASH_UTILS_HOME/lib/cliargs
source $BASH_UTILS_HOME/lib/clicommon
source $BASH_UTILS_HOME/lib/clilog

# bt login -u USERNAME -p APIKEY
# --- BT CLI Config ---
# bt config set NAME VALUE
# bt config get NAME
# bt config unset NAME
# bt config list
# --- Repository ---
# bt list repos [-U USER | -O ORG] [--output-file FILE]
# bt get repo NAME [-U USER | -O ORG] [--output-file FILE]
# bt create repo NAME [-O ORG] [--input-file FILE] [--type TYPE] [--premium] [--private] [--desc DESC] [--labels CSV] [--output-file FILE]
# bt update repo NAME [-O ORG] [--input-file FILE] [--desc DESC] [--labels CSV] [--output-file FILE]
# bt delete repo NAME [-O ORG] [--output-file FILE]
# bt search repo NAME [--desc DESC] [--output-file FILE]
# bt calc metadata [-O ORG] [-R REPO] [--path PATH] [--input-file FILE] [--passphrase PASSPHRASE] [--privatekey FILE] [--output-file FILE]
# --- Package ---
# bt list packages [-U USER | -O ORG] [-R REPO] [--output-file FILE]
# bt get package NAME [-U USER | -O ORG] [-R REPO] [--output-file FILE]
# bt create package NAME [-O ORG] [-R REPO] [--input-file FILE] [--license CSV] [--custom-license CSV] [--desc DESC] [--labels CSV] [--output-file FILE]
# bt update package NAME [-O ORG] [-R REPO] [--input-file FILE] [--license CSV] [--custom-license CSV] [--desc DESC] [--labels CSV] [--output-file FILE]
# bt delete package NAME [-O ORG] [-R REPO] [--output-file FILE]
# bt link package [-O ORG] [-R REPO] --source-package SUBJ/REPO/PKG [--input-file FILE] [--path-prefix PATH] [--output-file FILE]
# bt unlink package [-O ORG] [-R REPO] --source-package SUBJ/REPO/PKG [--output-file FILE]
# bt search package NAME [-U USER|-O ORG] [-R REPO] [--desc DESC] [--output-file FILE]
# --- Version ---
# bt list versions [-U USER | -O ORG] [-R REPO] [-P PACKAGE] [--output-file FILE]
# bt get version NAME [-U USER | -O ORG] [-R REPO] [-P PACKAGE] [--output-file FILE]
# bt create version NAME [-O ORG] [-R REPO] [-P PACKAGE] [--input-file FILE] [--desc DESC] [--output-file FILE]
# bt update version NAME [-O ORG] [-R REPO] [-P PACKAGE] [--input-file FILE] [--desc DESC] [--output-file FILE]
# bt delete version NAME [-O ORG] [-R REPO] [-P PACKAGE] [--output-file FILE]
# bt download version NAME [-O ORG] [-R REPO] [-P PACKAGE]
# bt sign version NAME [-O ORG] [-R REPO] [-P PACKAGE] [--input-file FILE] [--passphrase PASSPHRASE] [--privatekey FILE] [--output-file FILE]
# bt sync maven-central [-O ORG] [-R REPO] [-P PACKAGE] [-V VERSION] [--input-file FILE] [--sync-username USERNAME] [--sync-password PASSWORD] [--close] [--output-file FILE]
# --- File ---
# bt get files [-U USER | -O ORG] [-R REPO] [-P PACKAGE] [-V VERSION] [--include-unpublished] [--output-file FILE]
# bt upload FILE PATH [-O ORG] [-R REPO] [-P PACKAGE] [-V VERSION] [--content-type TYPE] [--override] [--publish] [--explode] [--debian DISTS:COMPS:ARCHS] [--vagrant BOX] [--output-file FILE]
# bt download file PATH [-O ORG] [-R REPO] [--output-file FILE]
# bt delete file PATH [-O ORG] [-R REPO] [--output-file FILE]
# bt sign file PATH [-O ORG] [-R REPO] [-P PACKAGE] [-V VERSION] [--input-file FILE] [--passphrase PASSPHRASE] [--privatekey FILE] [--output-file FILE]
# bt search file NAME [-U USER|-O ORG] [-R REPO] [--search-sha1] [--output-file FILE]

# --- Options ---
# -O, --org ORG
# -R, --repo REPO
# -P, --pkg PKG
# -V, --version VERSION
#     --path PATH
#     --input-file FILE
#     --type TYPE
#     --premium
#     --private
#     --desc DESC
#     --labels CSV
#     --passphrase PASSPHRASE
#     --privatekey FILE
#     --license CSV
#     --custom-license CSV
#     --source-package SUBJ/REPO/PKG
#     --path-prefix PATH
#     --sync-username USERNAME
#     --sync-password PASSWORD
#     --close
#     --content-type TYPE
#     --override
#     --publish
#     --explode
#     --debian DISTS:COMPS:ARCHS
#     --vagrant BOX
#     --search-sha1
# -s, --silent
# -v, --verbose
# -u, --username USERNAME
# -p, --apikey APIKEY
#     --trace
#     --debug
#     --pretty
#     --parsed

#Exit codes:
# 0 - success
# 101 - unauthorized
# 100 - bad request
# 103 - forbidden
# 104 - not found
# 1 - general error
# 109 - conflict

declare -r BT_BASH_VERSION="0.1.0-SNAPSHOT" 2> /dev/null

usage() {
    local scriptname=`basename $0`
    echo "Usage: $scriptname ACTION [OBJECT] [ARGS] [OPTIONS]"
    echo "   ACTION  - The action to execute. Available actions:"
    echo "             login    - verify and store the given credentials"
    echo "             list     - list objects of given types"
    echo "             get      - get the metadata of a given object"
    echo "             create   - create an object"
    echo "             update   - update an object"
    echo "             delete   - delete an object"
    echo "             sign     - sign content"
    echo "             calc     - calculate content"
    echo "             link     - link entities"
    echo "             unlink   - unlink entities"
    echo "             sync     - sync content"
    echo "             download - download content"
    echo "             upload   - upload content"
    echo "             search   - search for objects"
    echo "             config   - configure the client (e.g. set default objects)"
    echo "   OBJECT  - The object type, one of:"
    echo "             repo(s)"
    echo "             package(s)"
    echo "             version(s)"
    echo "             file(s)"
    echo "             metadata"
    echo "   ARGS    - The arguments for the command (specific per command)"
    echo "   OPTIONS - The options for the command (specific per command)"
    echo " For further details on a specific command, use -h or --help with that command."
    echo " E.g. use the following example to get the specific help for creating a repo:"
    echo "   $scriptname create repo --help"
}

declare -r           BT_ARGS_HELP="-h|--help"
declare -r       BT_ARGS_USERNAME="-u|--username"
declare -r         BT_ARGS_APIKEY="-p|--apikey"
declare -r           BT_ARGS_USER="-U|--user"
declare -r            BT_ARGS_ORG="-O|--org"
declare -r           BT_ARGS_REPO="-R|--repo"
declare -r            BT_ARGS_PKG="-P|--pkg"
declare -r        BT_ARGS_VERSION="-V|--version"
declare -r           BT_ARGS_PATH="--path"
declare -r      BT_ARGS_INPUTFILE="--input-file"
declare -r     BT_ARGS_OUTPUTFILE="--output-file"
declare -r           BT_ARGS_TYPE="--type"
declare -r        BT_ARGS_PREMIUM="--premium"
declare -r        BT_ARGS_PRIVATE="--private"
declare -r           BT_ARGS_DESC="--desc"
declare -r         BT_ARGS_LABELS="--labels"
declare -r     BT_ARGS_PASSPHRASE="--passphrase"
declare -r     BT_ARGS_PRIVATEKEY="--privatekey"
declare -r        BT_ARGS_LICENSE="--license"
declare -r BT_ARGS_CUSTOM_LICENSE="--custom-license"
declare -r        BT_ARGS_SRC_PKG="--source-package"
declare -r    BT_ARGS_PATH_PREFIX="--path-prefix"
declare -r  BT_ARGS_SYNC_USERNAME="--sync-username"
declare -r  BT_ARGS_SYNC_PASSWORD="--sync-password"
declare -r          BT_ARGS_CLOSE="--close"
declare -r   BT_ARGS_CONTENT_TYPE="--content-type"
declare -r       BT_ARGS_OVERRIDE="--override"
declare -r        BT_ARGS_PUBLISH="--publish"
declare -r        BT_ARGS_EXPLODE="--explode"
declare -r         BT_ARGS_DEBIAN="--debian"
declare -r        BT_ARGS_VAGRANT="--vagrant"
declare -r    BT_ARGS_SEARCH_SHA1="--search-sha1"
declare -r         BT_ARGS_SILENT="-s|--silent"
declare -r        BT_ARGS_VERBOSE="-v|--verbose"
declare -r          BT_ARGS_DEBUG="--debug"
declare -r          BT_ARGS_TRACE="--trace"
declare -r         BT_ARGS_PRETTY="--pretty"
declare -r         BT_ARGS_PARSED="--parsed"

declare -r BT_ARGS_REQUIRE_VALUE="|$BT_ARGS_USERNAME|$BT_ARGS_APIKEY|$BT_ARGS_USER|$BT_ARGS_ORG|$BT_ARGS_REPO|$BT_ARGS_PKG|$BT_ARGS_VERSION|$BT_ARGS_PATH|$BT_ARGS_INPUTFILE|$BT_ARGS_OUTPUTFILE|$BT_ARGS_TYPE|$BT_ARGS_TYPE|$BT_ARGS_DESC|$BT_ARGS_LABELS|$BT_ARGS_PASSPHRASE|$BT_ARGS_PRIVATEKEY|$BT_ARGS_LICENSE|$BT_ARGS_CUSTOM_LICENSE|$BT_ARGS_SRC_PKG|$BT_ARGS_PATH_PREFIX|$BT_ARGS_SYNC_USERNAME|$BT_ARGS_SYNC_PASSWORD|$BT_ARGS_CONTENT_TYPE|$BT_ARGS_DEBIAN|$BT_ARGS_VAGRANT|"

_init_args() {
    username="$BINTRAY_USERNAME"
    apikey="$BINTRAY_APIKEY"
    org="$BINTRAY_ORG"
    repo="$BINTRAY_REPO"
    package="$BINTRAY_PACKAGE"
    bintrayApiUrl="$BINTRAY_API_URL"
    if [[ "$bintrayApiUrl" == "" ]]; then
        bintrayApiUrl="https://api.bintray.com"
    fi
    bintrayDlUrl="$BINTRAY_DL_URL"
    if [[ "$bintrayDlUrl" == "" ]]; then
        bintrayDlUrl="https://dl.bintray.com"
    fi
    argsArray=()
}

cliargs_arg_requires_value() {
    clilog_trace "cliargs_arg_requires_value: 1:$1"
    if [[ "$BT_ARGS_REQUIRE_VALUE" == *"|$1|"* ]]; then
        return 0
    fi
    return 1
}

cliargs_parse_arg() {
    clilog_trace "cliargs_parse_arg: 1:$1 2:$2"
    if [[ "|$BT_ARGS_LICENSE|" == *"|$1|"* ]]; then
        license="$2"
    elif [[ "|$BT_ARGS_PRIVATEKEY|" == *"|$1|"* ]]; then
        privateKeyFile="$2"
    elif [[ "|$BT_ARGS_PASSPHRASE|" == *"|$1|"* ]]; then
        passphrase="$2"
    elif [[ "|$BT_ARGS_LABELS|" == *"|$1|"* ]]; then
        labels="$2"
    elif [[ "|$BT_ARGS_DESC|" == *"|$1|"* ]]; then
        description="$2"
    elif [[ "|$BT_ARGS_TYPE|" == *"|$1|"* ]]; then
        repoType="$2"
    elif [[ "|$BT_ARGS_INPUTFILE|" == *"|$1|"* ]]; then
        inputFile="$2"
    elif [[ "|$BT_ARGS_OUTPUTFILE|" == *"|$1|"* ]]; then
        outputFile="$2"
    elif [[ "|$BT_ARGS_PATH|" == *"|$1|"* ]]; then
        path="$2"
    elif [[ "|$BT_ARGS_PKG|" == *"|$1|"* ]]; then
        pkg="$2"
    elif [[ "|$BT_ARGS_VERSION|" == *"|$1|"* ]]; then
        version="$2"
    elif [[ "|$BT_ARGS_REPO|" == *"|$1|"* ]]; then
        repo="$2"
    elif [[ "|$BT_ARGS_ORG|" == *"|$1|"* ]]; then
        org="$2"
    elif [[ "|$BT_ARGS_USER|" == *"|$1|"* ]]; then
        user="$2"
    elif [[ "|$BT_ARGS_APIKEY|" == *"|$1|"* ]]; then
        apikey="$2"
    elif [[ "|$BT_ARGS_USERNAME|" == *"|$1|"* ]]; then
        username="$2"
    elif [[ "|$BT_ARGS_CONTENT_TYPE|" == *"|$1|"* ]]; then
        contentType="$2"
    elif [[ "|$BT_ARGS_SYNC_USERNAME|" == *"|$1|"* ]]; then
        syncUsername="$2"
    elif [[ "|$BT_ARGS_SYNC_PASSWORD|" == *"|$1|"* ]]; then
        syncPassword="$2"
    elif [[ "|$BT_ARGS_PATH_PREFIX|" == *"|$1|"* ]]; then
        pathPrefix="$2"
    elif [[ "|$BT_ARGS_SRC_PKG|" == *"|$1|"* ]]; then
        sourcePkg="$2"
    elif [[ "|$BT_ARGS_CUSTOM_LICENSE|" == *"|$1|"* ]]; then
        customLicense="$2"
    elif [[ "|$BT_ARGS_VAGRANT|" == *"|$1|"* ]]; then
        vagrantBox="$2"
    elif [[ "|$BT_ARGS_DEBIAN|" == *"|$1|"* ]]; then
        debianCoords="$2"
    elif [[ "|$BT_ARGS_HELP|" == *"|$1|"* ]]; then
        showHelp=true
    elif [[ "|$BT_ARGS_PREMIUM|" == *"|$1|"* ]]; then
        premium=true
    elif [[ "|$BT_ARGS_PRIVATE|" == *"|$1|"* ]]; then
        private=true
    elif [[ "|$BT_ARGS_SILENT|" == *"|$1|"* ]]; then
        silent=true
    elif [[ "|$BT_ARGS_VERBOSE|" == *"|$1|"* ]]; then
        verbose=true
    elif [[ "|$BT_ARGS_CLOSE|" == *"|$1|"* ]]; then
        syncClose=true
    elif [[ "|$BT_ARGS_OVERRIDE|" == *"|$1|"* ]]; then
        override=true
    elif [[ "|$BT_ARGS_PUBLISH|" == *"|$1|"* ]]; then
        publish=true
    elif [[ "|$BT_ARGS_EXPLODE|" == *"|$1|"* ]]; then
        explode=true
    elif [[ "|$BT_ARGS_SEARCH_SHA1|" == *"|$1|"* ]]; then
        searchBySha1=true
    elif [[ "|$BT_ARGS_DEBUG|" == *"|$1|"* ]]; then
        clilog_level=$CLILOG_LEVEL_DEBUG
    elif [[ "|$BT_ARGS_TRACE|" == *"|$1|"* ]]; then
        clilog_level=$CLILOG_LEVEL_TRACE
    elif [[ "|$BT_ARGS_PRETTY|" == *"|$1|"* ]]; then
        prettyOutput=true
    elif [[ "|$BT_ARGS_PARSED|" == *"|$1|"* ]]; then
        parsedOutput=true
    else
        argsArray+=("$1")
    fi
}

_handle_action_object_error() {
    local action="$1"
    local object="$2"
    if [[ ${#argsArray[@]} -gt 1 ]]; then
        print_error "unexpected $action target object: $object"
        eval "usage_$action"
        exit 1
    elif [[ $showHelp == true ]]; then
        eval "usage_$action"
        exit 0
    else 
        print_error "a target object is expected"
        eval "usage_$action"
        exit 1
    fi
}

declare -r action_list_objects='|repos|packages|versions|'
declare -r action_get_objects='|repo|package|version|files|'
declare -r action_create_objects='|repo|package|version|'
declare -r action_update_objects='|repo|package|version|'
declare -r action_delete_objects='|repo|package|version|file|'
declare -r action_search_objects='|repo|package|file|'
declare -r action_calc_objects='|metadata|'
declare -r action_link_objects='|package|'
declare -r action_unlink_objects='|package|'
declare -r action_sign_objects='|version|file|'
declare -r action_sync_objects='|maven-central|'
declare -r single_verb_actions='|login|config|upload|download|'

_route() {
    if [[ "$1" != "" ]]; then
        if [[ "$single_verb_actions" == *"|$1|"* ]]; then
            local method="bt_$1"
            clilog_debug "routing to method: $method"
            eval "$method $@"
        else
            local varName=action_${1}_objects
            local actionObjects=${!varName}
            if [[ "$actionObjects" != "" ]]; then
                if [[ "$actionObjects" == *"|$2|"* ]]; then
                    local method="bt_$1_$2"
                    clilog_debug "routing to method: $method"
                    eval "$method $@"
                else 
                    _handle_action_object_error "$1" "$2"
                fi
            else
                print_error "Unknown action: $1"
                usage
                exit 1
            fi
        fi
    else 
        usage
        exit 1
    fi
}

declare -a curlArgs=()

_exit_code_from_response_code() {
    local -i responseCode=$1
    clilog_debug "handle response code: $responseCode"
    if [ $responseCode -ge 200 ] && [ $responseCode -lt 300 ]; then
        return 0
    elif [ $responseCode -eq 400 ]; then
        return 100
    elif [ $responseCode -eq 401 ]; then
        return 101
    elif [ $responseCode -eq 403 ]; then
        return 103
    elif [ $responseCode -eq 404 ]; then
        return 104
    elif [ $responseCode -eq 409 ]; then
        return 109
    else
        return 1
    fi
}

_get_repo_owner() {
    if [[ "$org" != "" ]]; then
        echo "$org"
    elif [[ "$user" != "" ]]; then
        echo "$user"
    else
        echo "$username"
    fi
}

parse_json_string_prop() {
    local json="$1"
    local prop="$2"
    local parsed=`echo "$json" | jq ."$prop" | sed s/^\"// | sed s/\"$//`
    echo "$parsed"
}

join_lines() {
    local input="$1"
    local separator="$2"
    local joined=""
    while read -r item; do
        if [[ "$joined" != "" ]]; then
            joined+="$separator"
        fi
        joined+="$item"
    done <<< "$input"
    echo "$joined"
}

print_pretty_json() {
    echo "$1" | jq .
}

print_parsed_package_json() {
    local json="$1"
    local terminalWidth=`tput cols`
    local valueColWidth=$((terminalWidth-20))
    echo "-Name:            $(parse_json_string_prop "$json" "name")"
    local parsedDesc=$(parse_json_string_prop "$json" "desc")
    parsedDesc=`chop_string_with_ellipsis "$parsedDesc" $valueColWidth`
    echo "-Description:     $parsedDesc"
    echo "-Owner:           $(parse_json_string_prop "$json" "owner")"
    echo "-Repository:      $(parse_json_string_prop "$json" "repo")"
    echo "-Latest Version:  $(parse_json_string_prop "$json" "latest_version")"
    local parsedVersions=$(parse_json_string_prop "$json" "versions[]")
    parsedVersions=$(join_lines "$parsedVersions" ", ")
    echo "-Versions:        $parsedVersions"
    local parsedLabels=$(parse_json_string_prop "$json" "labels[]")
    parsedLabels=$(join_lines "$parsedLabels" ", ")
    echo "-Labels:          $parsedLabels"
    local parsedLicenses=$(parse_json_string_prop "$json" "licenses[]")
    parsedLicenses=$(join_lines "$parsedLicenses" ", ")
    echo "-Licenses:        $parsedLicenses"
    local parsedCustomLicenses=$(parse_json_string_prop "$json" "custom_licenses[]")
    parsedCustomLicenses=$(join_lines "$parsedCustomLicenses" ", ")
    echo "-Custom Licenses: $parsedCustomLicenses"
    echo "-Website:         $(parse_json_string_prop "$json" "website_url")"
    echo "-Issue Tracker:   $(parse_json_string_prop "$json" "issue_tracker_url")"
    echo "-Version Control: $(parse_json_string_prop "$json" "vcs_url")"
}

_run_curl() {
    local handleParsedOutputResponse="$1"
    #Prepare
    local curlOutput="$outputFile"
    if [[ "$curlOutput" == "" ]]; then
        local tmpfile=`mktemp`
        clilog_debug "Writing to temp file: $tmpfile"
        curlOutput="$tmpfile"
    fi
    curlArgs+=("-s" "-w" "%{http_code}" "-o" "$curlOutput")
    curlArgs+=("-A" "bt-bash-cli/$BT_BASH_VERSION")
    
    #Execute
    local responseCode=`curl "${curlArgs[@]}"`
    clilog_debug "HTTP code: $responseCode"
    if [[ "$tmpfile" != "" ]]; then
        local output=`cat $tmpfile`
        if [[ "$prettyOutput" == "true" ]]; then
            print_pretty_json "$output"
        elif [[ "$parsedOutput" == "true" ]]; then
            if [[ "$handleParsedOutputResponse" != "" ]]; then
                eval "$handleParsedOutputResponse" "$responseCode" \'${output}\'
            fi
            if [[ $? -ne 0 ]]; then
                local parsedMessage=$(parse_json_string_prop "$output" "message")
                echo "MESSAGE: $parsedMessage"
            fi
        else
            echo "$output"
        fi
        #Cleanup
        clilog_trace "Deleting temp file $tmpfile"
        rm "$tmpfile" 2>&1 1> /dev/null
        clilog_debug "temp file deletion return code: $?"
    fi
    _exit_code_from_response_code $responseCode
    return $?
}

handle_parsed_package_output_response() {
    local responseCode="$1"
    local output="$2"
    if [[ "$responseCode" == "200" ]] || [[ "$responseCode" == "201" ]]; then
        print_parsed_package_json "$output"
        return 0
    fi
    return 1
}

bt_get_package() {
    bt_get_package_help() {
        local scriptname=`basename $0`
        echo "Usage: $scriptname get package NAME [-U USER | -O ORG] [-R REPO]"
    }
    local repoOwner=`_get_repo_owner`
    local pkgName=${argsArray[2]}
    clilog_debug "repoOwner='$repoOwner', repo='$repo', pkgName='$pkgName'"
    cliargs_assert_required "package name" "$pkgName" "bt_get_package_help"
    cliargs_assert_required "repo owner" "$repoOwner" "bt_get_package_help"
    cliargs_assert_required "repo name" "$repo" "bt_get_package_help"
    cliargs_assert_equals "args count" "${#argsArray[@]}" "3" "bt_get_package_help" "Unexpected command argument: ${argsArray[3]}"
    #Prepare
    local url="$bintrayApiUrl/packages/$repoOwner/$repo/$pkgName"
    clilog_debug "get_package: url = '$url'"
    curlArgs+=("$url")

    #Execute
    _run_curl "handle_parsed_package_output_response"
    #Exit
    exit $?
}

bt_list_repos() {
    bt_list_repos_help() {
        local scriptname=`basename $0`
        echo "Usage: $scriptname list repos [-U USER | -O ORG]"
    }
    handle_parsed_repos_output_response() {
        local responseCode="$1"
        local output="$2"
        if [[ "$responseCode" == "200" ]]; then
            echo "$output" | jq -r ".[] | .owner+\" / \"+.name"
            return 0
        fi
        return 1
    }
    local repoOwner=`_get_repo_owner`
    cliargs_assert_required "repo owner" "$repoOwner" "bt_list_repos_help"
    cliargs_assert_equals "args count" "${#argsArray[@]}" "2" "bt_list_repos_help" "Unexpected command argument: ${argsArray[2]}"
    #Prepare
    local url="$bintrayApiUrl/repos/$repoOwner"
    clilog_debug "list_repos: url = '$url'"
    curlArgs+=("$url")

    #Execute
    _run_curl "handle_parsed_repos_output_response"
    #Exit
    exit $?   
}

main() {
    clilog_trace "start main"
    clilog_trace "calling init args"
    _init_args
    clilog_trace "calling cliargs parse"
    cliargs_parse "$@"
    clilog_trace "calling route"
    _route "$@"
}

clilog_output_type=$CLILOG_OUT_FILE
clilog_output_file="bt.log"
main "$@"